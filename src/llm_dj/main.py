from typing import Optional
from rich import print
from rich.pretty import pprint
import typer
from llm_dj.spotify.client import SpotifyClient
from llm_dj.llm.client import LLMClient
import asyncio

class LLMDJ:
    """Main class for the LLM DJ application.
    
    Combines Spotify and LLM functionality to create AI-powered playlists.
    """

    def __init__(self):
        """Initialize the LLMDJ with Spotify and LLM clients."""
        self.spotify = SpotifyClient()
        self.llm = LLMClient()

    async def create_playlist_from_prompt(self, prompt, playlist_name: Optional[str] = None):
        # Get song suggestions from LLM
        suggestions = await self.llm.get_music_suggestions(prompt)

        pprint(suggestions)

        if not suggestions:
            raise ValueError("No song suggestions found")
        
        playlist_name = playlist_name or suggestions.playlist_name

        # Create a new playlist
        print(f"[bold green]Creating playlist: {playlist_name}[/bold green]")
        playlist = self.spotify.create_playlist(playlist_name, description=f"Generated by LLM-DJ: {suggestions.description}")

        # Search for and add tracks
        # Note: This is a simplified version - you'll need to parse the LLM response
        # and match it with actual Spotify tracks
        for song in suggestions.suggestions:
            if not song:
                continue

            if song.type_ == "song":
                print(f"[bold green][{song.type_}] {song.name}[/bold green]")
                results = self.spotify.search_tracks(song.name + " " + song.artist)

                if results and results['tracks']['items']:
                    track_uri = results['tracks']['items'][0]['uri']
                    self.spotify.client.playlist_add_items(playlist['id'], [track_uri])
            elif song.type_ == "album":
                print(f"[bold blue][{song.type_}] {song.name}[/bold blue]")
                results = self.spotify.search_albums(song.name + " " + song.artist)

                if results and results['albums']['items']:
                    album_uri = results['albums']['items'][0]['uri']
                    tracks = self.spotify.search_tracks_by_album(album_uri)
                    track_uris = [track['uri'] for track in tracks['items']]
                    for track in track_uris:
                        print(f"[bold green]\t{track}[/bold green]")
                    self.spotify.client.playlist_add_items(playlist['id'], track_uris)
                else:
                    print(f"[bold red]No album found for: {song.name}[/bold red]")
            else:
                raise ValueError(f"Invalid suggestion type: {song.type_}")

        return playlist

async def _main(
    prompt: str = typer.Argument(..., help="The prompt to generate a playlist from"),
    name: str = typer.Option(None, help="Name of the playlist. If not provided, will be generated from the prompt"),
):
    dj = LLMDJ()
    await dj.create_playlist_from_prompt(prompt, name)

def main(prompt: str, name: str = None):
    asyncio.run(_main(prompt, name))

if __name__ == "__main__":
    typer.run(main) 