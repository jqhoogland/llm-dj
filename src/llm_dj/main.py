from typing import Optional
from rich import print
from rich.pretty import pprint
import typer
from llm_dj.spotify.client import SpotifyClient
from llm_dj.llm.client import LLMClient
from llm_dj.config import Config
import asyncio

app = typer.Typer()


class LLMDJ:
    """Main class for the LLM DJ application.

    Combines Spotify and LLM functionality to create AI-powered playlists.
    """

    def __init__(self, llm_provider: Optional[str] = None):
        """Initialize the LLMDJ with Spotify and LLM clients.
        
        Args:
            llm_provider: Override the default LLM provider from config
        """
        self.spotify = SpotifyClient()
        self.llm = LLMClient(provider=llm_provider or Config.LLM_PROVIDER)

        print(f"[bold green]LLM provider: {self.llm.provider}[/bold green]")

    async def create_playlist_from_prompt(
        self, prompt, playlist_name: Optional[str] = None
    ):
        # Get song suggestions from LLM
        suggestions = await self.llm.get_music_suggestions(prompt)

        pprint(suggestions)

        if not suggestions:
            raise ValueError("No song suggestions found")

        playlist_name = playlist_name or suggestions.playlist_name

        # Create a new playlist
        print(f"[bold green]Creating playlist: {playlist_name}[/bold green]")
        playlist = self.spotify.create_playlist(
            playlist_name, description=f"Generated by LLM-DJ: {suggestions.description}"
        )

        # Search for and add tracks
        # Note: This is a simplified version - you'll need to parse the LLM response
        # and match it with actual Spotify tracks
        for song in suggestions.suggestions:
            if not song:
                continue

            if song.type_ == "song":
                print(f"[bold green][{song.type_}] {song.name}[/bold green]")
                results = self.spotify.search_tracks(song.name + " " + song.artist)

                if results and results["tracks"]["items"]:
                    track_uri = results["tracks"]["items"][0]["uri"]
                    self.spotify.client.playlist_add_items(playlist["id"], [track_uri])
            elif song.type_ == "album":
                print(f"[bold blue][{song.type_}] {song.name}[/bold blue]")
                results = self.spotify.search_albums(song.name + " " + song.artist)

                if results and results["albums"]["items"]:
                    album_uri = results["albums"]["items"][0]["uri"]
                    tracks = self.spotify.search_tracks_by_album(album_uri)
                    track_uris = [track["uri"] for track in tracks["items"]]
                    for track in track_uris:
                        print(f"[bold green]\t{track}[/bold green]")
                    self.spotify.client.playlist_add_items(playlist["id"], track_uris)
                else:
                    print(f"[bold red]No album found for: {song.name}[/bold red]")
            else:
                raise ValueError(f"Invalid suggestion type: {song.type_}")

        return playlist

    async def list_playlists(self):
        """List all playlists for the current user."""
        playlists = self.spotify.get_user_playlists()
        print("\n[bold blue]Your Playlists:[/bold blue]")
        for playlist in playlists['items']:
            print(f"[green]ID:[/green] {playlist['id']}")
            print(f"[green]Name:[/green] {playlist['name']}")
            print(f"[green]Tracks:[/green] {playlist['tracks']['total']}")
            print("---")
        return playlists

    async def extend_playlist_from_prompt(self, playlist_id: str, prompt: str):
        """Extend an existing playlist using an LLM prompt."""
        # Get the existing playlist
        playlist = self.spotify.get_playlist(playlist_id)
        if not playlist:
            raise ValueError(f"Playlist with ID {playlist_id} not found")

        print(f"[bold blue]Extending playlist: {playlist['name']}[/bold blue]")
        
        # Get existing tracks
        existing_tracks = []
        for item in playlist['tracks']['items']:
            track = item['track']
            artists = ", ".join(artist['name'] for artist in track['artists'])
            existing_tracks.append(f"{track['name']} by {artists}")
        
        # Create an enhanced prompt that includes existing tracks
        enhanced_prompt = f"""Existing songs in the playlist:
{chr(10).join(f"- {track}" for track in existing_tracks)}

Based on these songs and the following request, suggest additional songs:
{prompt}"""

        # Get song suggestions from LLM
        suggestions = await self.llm.get_music_suggestions(enhanced_prompt)

        pprint(suggestions)
        
        if not suggestions:
            raise ValueError("No song suggestions found")
        
        # Add tracks using the same logic as create_playlist_from_prompt
        for song in suggestions.suggestions:
            if not song:
                continue

            if song.type_ == "song":
                print(f"[bold green][{song.type_}] {song.name}[/bold green]")
                results = self.spotify.search_tracks(song.name + " " + song.artist)

                if results and results['tracks']['items']:
                    track_uri = results['tracks']['items'][0]['uri']
                    self.spotify.client.playlist_add_items(playlist_id, [track_uri])
            elif song.type_ == "album":
                print(f"[bold blue][{song.type_}] {song.name}[/bold blue]")
                results = self.spotify.search_albums(song.name + " " + song.artist)

                if results and results['albums']['items']:
                    album_uri = results['albums']['items'][0]['uri']
                    tracks = self.spotify.search_tracks_by_album(album_uri)
                    track_uris = [track['uri'] for track in tracks['items']]
                    for track in track_uris:
                        print(f"[bold green]\t{track}[/bold green]")
                    self.spotify.client.playlist_add_items(playlist_id, track_uris)
                else:
                    print(f"[bold red]No album found for: {song.name}[/bold red]")
            else:
                raise ValueError(f"Invalid suggestion type: {song.type_}")

        return playlist


@app.command()
def create(
    prompt: str = typer.Argument(..., help="The prompt to generate a playlist from"),
    name: str = typer.Option(
        None,
        help="Name of the playlist. If not provided, will be generated from the prompt",
    ),
    provider: str = typer.Option(
        None,
        help="LLM provider to use (openai/anthropic). Overrides the LLM_PROVIDER env variable",
    ),
):
    """Create a new playlist from a prompt."""

    async def _create():
        dj = LLMDJ(llm_provider=provider)
        await dj.create_playlist_from_prompt(prompt, name)

    asyncio.run(_create())


@app.command()
def extend(
    playlist_id: str = typer.Argument(..., help="The ID of the playlist to extend"),
    prompt: str = typer.Argument(..., help="The prompt to generate additional songs"),
    provider: str = typer.Option(
        None,
        help="LLM provider to use (openai/anthropic). Overrides the LLM_PROVIDER env variable",
    ),
):
    """Extend an existing playlist with new songs based on a prompt."""

    async def _extend():
        dj = LLMDJ(llm_provider=provider)
        await dj.extend_playlist_from_prompt(playlist_id, prompt)

    asyncio.run(_extend())


@app.command()
def list_playlists(
    provider: str = typer.Option(
        None,
        help="LLM provider to use (openai/anthropic). Overrides the LLM_PROVIDER env variable",
    ),
):
    """List all playlists and their IDs."""

    async def _list():
        dj = LLMDJ(llm_provider=provider)
        await dj.list_playlists()

    asyncio.run(_list())


if __name__ == "__main__":
    app()
